name: "CI/CD: ECR Build & Ansible Deploy"

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPO_URL: ${{ secrets.ECR_REPO_URL }}
      EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
      IMAGE_TAG: latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # -- DOCKER BUILD AND PUSH TO ECR --

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION \
        | docker login --username AWS --password-stdin $ECR_REPO_URL

    - name: Build and Push Docker Image
      run: |
        docker build -t flask-app .
        docker tag flask-app:latest $ECR_REPO_URL:$IMAGE_TAG
        docker push $ECR_REPO_URL:$IMAGE_TAG

    # -- DEPLOY TO EC2 VIA ANSIBLE --

    # - name: Install Ansible
    #   run: |
    #     sudo apt update
    #     sudo apt install -y ansible

    # - name: Disable SSH host key checking
    #   run: |
    #     echo "[defaults]" > ansible/ansible.cfg
    #     echo "host_key_checking = False" >> ansible/ansible.cfg
    
    # - name: set ansible env to skip host key checking
    #   run: echo "ANSIBLE_HOST_KEY_CHECKING=False" >> $GITHUB_ENV

    # - name: Write SSH Private Key
    #   run: |
    #     mkdir -p ~/.ssh
    #     echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
    #     chmod 600 ~/.ssh/id_rsa
      

    # - name: Create Ansible Inventory
    #   run: |
    #     echo "[webserver]" > ansible/inventory.ini
    #     echo "${{ secrets.EC2_PUBLIC_IP }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> ansible/inventory.ini

    # - name: Run Ansible Playbook
    #   run: |
    #     export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
    #     export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     export AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
    #     export EC2_PUBLIC_IP=${{ secrets.EC2_PUBLIC_IP }}
    #     ansible-playbook -i ansible/inventory.ini ansible/playbook.yml

    # allow ecs to force pull latest image
    - name: Update ECS Service
      run: |
        aws ecs update-service \
          --cluster ecs-cluster \
          --service ecs-service \
          --force-new-deployment 
